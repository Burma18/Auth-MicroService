generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                @id @default(autoincrement())
  firstName            String
  lastName             String
  role                 UserRole           @default(USER)
  email                String             @unique
  password             String
  isActive             Boolean            @default(true)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  stripeCustomerId     String
  photo                String?
  isPhoneVerified      Boolean            @default(false)
  phone                String?
  preferences          Json?
  Ai                   Ai[]
  AiPrompt             AiPrompt[]
  AiRequest            AiRequest[]
  coursesProgress      CourseProgress[]
  Environment          Environment[]
  ExerciseReview       ExerciseReview[]
  lecturesProgress     LectureProgress[]
  Memberships          Memberships[]
  Notes                Notes[]
  notifications        Notification[]
  createdNotifications Notification[]     @relation("AdminCreatedNotifications")
  Organizations        Organizations[]
  reviews              Review[]
  submissions          Submission[]
  batches              UsersOnBatches[]
  VideoProgress        VideoProgress[]
  weeksProgress        WeekProgress[]
  remoteDatabase       remoteDatabase[]
  userActivity         userActivity[]
  userMetaData         userMetaData?
  userSubscription     userSubscription[]
}

model Organizations {
  id                         Int            @id(map: "organizations_pkey") @default(autoincrement())
  name                       String         @unique @db.VarChar(255)
  userId                     Int
  isActive                   Boolean?       @default(true)
  adminUrl                   String         @db.VarChar(255)
  studentUrl                 String         @db.VarChar(255)
  isSignUpEnabled            Boolean?       @default(true)
  isPhoneVerificationEnabled Boolean?       @default(false)
  expiry                     DateTime?      @db.Date
  createdAt                  DateTime?      @default(dbgenerated("CURRENT_DATE")) @db.Date
  updatedAt                  DateTime?      @default(dbgenerated("CURRENT_DATE")) @db.Date
  CourseFork                 CourseFork[]
  ExerciseFork               ExerciseFork[]
  LectureFork                LectureFork[]
  Memberships                Memberships[]
  User                       User?          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "organizations_userId_fkey")
  WeekFork                   WeekFork[]
}

model Memberships {
  id               Int                @id @default(autoincrement())
  userId           Int
  organizationId   Int
  role             UserRole
  createdAt        DateTime?          @default(dbgenerated("CURRENT_DATE")) @db.Date
  updatedAt        DateTime?          @default(dbgenerated("CURRENT_DATE")) @db.Date
  isActive         Boolean?           @default(true)
  Organizations    Organizations?     @relation(fields: [organizationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User             User?              @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userSubscription userSubscription[]

  @@unique([userId, organizationId])
}

model userSubscription {
  userId           Int
  courseId         Int
  plan             UserPlan     @default(FREE)
  planRange        PlanRange    @default(FREE)
  isActive         Boolean      @default(true)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  switchToFreePlan DateTime?
  membershipId     Int
  Memberships      Memberships  @relation(fields: [membershipId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Course           CourseMaster @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User             User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([userId, courseId])
}

model CourseMaster {
  id               Int                @id(map: "Course_pkey") @default(autoincrement())
  title            String             @unique
  isPublished      Boolean            @default(false)
  cover            String?
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  slug             String?
  batches          Batch[]
  CourseFork       CourseFork[]
  progress         CourseProgress[]
  environments     Environment[]
  ExerciseReview   ExerciseReview[]
  language         Language[]
  notes            Notes[]
  Review           Review[]
  WeekMaster       WeekMaster[]
  userSubscription userSubscription[]
}

model Batch {
  id        Int              @id @default(autoincrement())
  title     String           @unique
  isActive  Boolean          @default(false)
  capacity  Int
  slack     String?
  startDate String
  endDate   String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  courseId  Int
  mentorId  Int?
  plan      UserPlan         @default(FREE)
  course    CourseMaster     @relation(fields: [courseId], references: [id])
  mentor    Mentor?          @relation(fields: [mentorId], references: [id])
  users     UsersOnBatches[]
}

model Mentor {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  batches   Batch[]
}

model UsersOnBatches {
  batchId Int
  userId  Int
  batch   Batch @relation(fields: [batchId], references: [id])
  user    User  @relation(fields: [userId], references: [id])

  @@id([batchId, userId])
}

model Submission {
  exerciseId Int
  userId     Int
  status     SubmissionStatus @default(TODO)
  code       Json
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  exercise   ExerciseMaster   @relation(fields: [exerciseId], references: [id])
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([exerciseId, userId])
}

model Review {
  rating    Int
  comment   String
  userId    Int
  lectureId Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  for       ReviewFor     @default(VIDEO)
  id        Int           @id @default(autoincrement())
  courseId  Int
  course    CourseMaster  @relation(fields: [courseId], references: [id])
  lecture   LectureMaster @relation(fields: [lectureId], references: [id])
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ExerciseReview {
  rating     Int
  comment    String
  exerciseId Int
  userId     Int
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  id         Int            @id @default(autoincrement())
  courseId   Int
  course     CourseMaster   @relation(fields: [courseId], references: [id])
  exercise   ExerciseMaster @relation(fields: [exerciseId], references: [id])
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CourseProgress {
  userId   Int
  courseId Int
  course   CourseMaster @relation(fields: [courseId], references: [id])
  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, courseId])
}

model WeekProgress {
  userId Int
  weekId Int
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  week   WeekMaster @relation(fields: [weekId], references: [id])

  @@id([userId, weekId])
}

model LectureProgress {
  userId    Int
  lectureId Int
  lecture   LectureMaster @relation(fields: [lectureId], references: [id])
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, lectureId])
}

model NotificationObject {
  id            Int            @id @default(autoincrement())
  content       String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[]
}

model Notification {
  id             Int                @id @default(autoincrement())
  senderId       Int?
  receiverId     Int
  readAt         DateTime?
  notificationId Int
  notification   NotificationObject @relation(fields: [notificationId], references: [id])
  receiver       User               @relation(fields: [receiverId], references: [id], onDelete: Cascade)
  sender         User?              @relation("AdminCreatedNotifications", fields: [senderId], references: [id])
}

model Ai {
  id         Int            @id @default(autoincrement())
  input      String
  output     String
  exerciseId Int
  userId     Int
  createdAt  DateTime       @default(now())
  exercise   ExerciseMaster @relation(fields: [exerciseId], references: [id])
  user       User           @relation(fields: [userId], references: [id])
  AiRequest  AiRequest[]
}

model AiRequest {
  id         Int            @id @default(autoincrement())
  exerciseId Int
  userId     Int
  request    Int
  aiId       Int
  ai         Ai             @relation(fields: [aiId], references: [id])
  exercise   ExerciseMaster @relation(fields: [exerciseId], references: [id])
  user       User           @relation(fields: [userId], references: [id])
}

model AiParameters {
  id          Int     @id @default(autoincrement())
  model       String
  maxTokens   Int
  temperature Decimal
}

model AiPrompt {
  id         Int            @id @default(autoincrement())
  exerciseId Int
  userId     Int
  text       String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  exercise   ExerciseMaster @relation(fields: [exerciseId], references: [id])
  user       User           @relation(fields: [userId], references: [id])
}

model Notes {
  id        Int           @id @default(autoincrement())
  notes     String
  userId    Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  lectureId Int
  courseId  Int?
  lecture   LectureMaster @relation(fields: [lectureId], references: [id])
  user      User          @relation(fields: [userId], references: [id])
  course    CourseMaster? @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_notes_course")
}

model userActivity {
  id       Int      @id @default(autoincrement())
  userId   Int
  lastSeen DateTime
  user     User     @relation(fields: [userId], references: [id])
}

model amoCRM {
  id           Int     @id @default(autoincrement())
  accessToken  String
  expiresAt    Decimal
  expiresIn    Decimal
  refreshToken String
  tokenType    String
}

model Language {
  id        Int          @id @default(autoincrement())
  title     String
  code      Int
  alias     String?
  language  String?
  courseId  Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  Course    CourseMaster @relation(fields: [courseId], references: [id])
}

model remoteDatabase {
  id               Int         @id @default(autoincrement())
  userId           Int
  databaseUser     String?     @db.VarChar(255)
  databasePassword String?     @db.VarChar(255)
  databaseName     String?     @db.VarChar(255)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  isActive         Boolean?    @default(true)
  environmentId    Int         @unique
  Environment      Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User             User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Environment {
  id              Int              @id @default(autoincrement())
  userId          Int
  instanceId      String?          @db.VarChar(255)
  instanceIp      String?          @db.VarChar(255)
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now()) @db.Timestamp(6)
  updatedAt       DateTime         @db.Timestamp(6)
  deletedAt       DateTime?        @db.Timestamp(6)
  status          String?          @db.VarChar
  dnsSubdomain    String?
  actualCreatedAt DateTime         @default(now()) @db.Timestamp(6)
  type            EnvironmentTypes @default(PERSONAL_ENVIRONMENT)
  courseId        Int
  sshPassword     String?
  timer           String?
  Course          CourseMaster     @relation(fields: [courseId], references: [id])
  User            User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  remoteDatabase  remoteDatabase?
}

model userMetaData {
  id      Int     @id @default(autoincrement())
  ip      String? @db.VarChar(255)
  city    String? @db.VarChar(255)
  region  String? @db.VarChar(255)
  country String? @db.VarChar(255)
  userId  Int?    @unique
  User    User?   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ExerciseSolution {
  id         Int            @id @default(autoincrement())
  solution   String
  exerciseId Int
  userId     Int
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  Exercise   ExerciseMaster @relation(fields: [exerciseId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_exercisesolution_exercise")
}

model aiGuideUsers {
  id        Int      @id @default(autoincrement())
  userName  String
  email     String   @unique
  createdAt DateTime @default(now())
}

model VideoProgress {
  userId    Int
  lectureId Int
  time      Int
  lastSeen  DateTime?
  Lecture   LectureMaster @relation(fields: [lectureId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User      User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([userId, lectureId])
}

model Quiz {
  id                Int             @id @default(autoincrement())
  title             String
  slug              String
  preferredCategory String
  description       String
  cover             String
  questionsCount    Int             @default(0)
  time              String
  isActive          Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  completedQuizzes  CompletedQuiz[]
  questions         QuizQuestion[]
}

model QuizUser {
  id               Int             @id @default(autoincrement())
  firstName        String
  lastName         String
  email            String          @unique
  phone            String
  leadId           Int?
  completedQuizzes CompletedQuiz[]
}

model CompletedQuiz {
  id         Int      @id @default(autoincrement())
  quizUserId Int
  quizId     Int
  category   String
  createdAt  DateTime @default(now())
  quiz       Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  quizUser   QuizUser @relation(fields: [quizUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model QuizOption {
  id         Int          @id @default(autoincrement())
  questionId Int
  optionText String
  score      Int          @default(1)
  category   String
  question   QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model QuizQuestion {
  id           Int          @id @default(autoincrement())
  quizId       Int
  questionText String
  order        Int
  options      QuizOption[]
  quiz         Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model CourseFork {
  id             Int            @id @default(autoincrement())
  title          String
  isPublished    Boolean?       @default(false)
  cover          String?
  isActive       Boolean?       @default(true)
  createdAt      DateTime?      @default(now()) @db.Timestamp(6)
  updatedAt      DateTime?      @default(now()) @db.Timestamp(6)
  slug           String?
  organizationId Int?
  masterCourseId Int?           @default(-1)
  CourseMaster   CourseMaster?  @relation(fields: [masterCourseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Organizations  Organizations? @relation(fields: [organizationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  WeekFork       WeekFork[]
}

model ExerciseFork {
  id               Int             @id @default(autoincrement())
  title            String
  level            ExerciseLevel?
  description      String?
  isActive         Boolean?        @default(true)
  isPublished      Boolean?        @default(false)
  createdAt        DateTime?       @default(now()) @db.Timestamp(6)
  updatedAt        DateTime?       @default(now()) @db.Timestamp(6)
  extras           Json?
  testCases        Json?
  code             Json?
  lectureId        Int?
  slug             String?
  mandatory        Boolean?        @default(false)
  languageId       Int?
  order            Int?
  countDown        Int?
  organizationId   Int?
  masterExerciseId Int?            @default(-1)
  LectureFork      LectureFork?    @relation(fields: [lectureId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ExerciseMaster   ExerciseMaster? @relation(fields: [masterExerciseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Organizations    Organizations?  @relation(fields: [organizationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ExerciseMaster {
  id             Int                @id(map: "Exercise_pkey") @default(autoincrement())
  title          String?
  level          ExerciseLevel
  description    String?
  isActive       Boolean            @default(true)
  isPublished    Boolean            @default(false)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime
  extras         Json[]
  testCases      Json[]
  code           Json
  lectureId      Int
  slug           String?
  mandatory      Boolean            @default(true)
  languageId     Int[]              @default([1])
  order          Int?
  countDown      Int                @default(30)
  Ai             Ai[]
  AiPrompt       AiPrompt[]
  AiRequest      AiRequest[]
  ExerciseFork   ExerciseFork[]
  LectureMaster  LectureMaster      @relation(fields: [lectureId], references: [id], map: "Exercise_lectureId_fkey")
  ExerciseReview ExerciseReview[]
  solution       ExerciseSolution[]
  submissions    Submission[]
}

model LectureFork {
  id                  Int            @id @default(autoincrement())
  title               String
  organizationId      Int?
  video               String?
  description         String?
  notes               String?
  isPublished         Boolean?       @default(false)
  isFree              Boolean?       @default(true)
  isActive            Boolean?       @default(true)
  order               Int?
  createdAt           DateTime?      @default(now()) @db.Timestamp(6)
  updatedAt           DateTime?      @default(now()) @db.Timestamp(6)
  cover               String?
  weekId              Int?
  slug                String?
  languageId          Int?
  videoMetaData       Json?          @db.Json
  personalEnvironment Boolean?       @default(false)
  type                LectureTypes?
  masterLectureId     Int?           @default(-1)
  ExerciseFork        ExerciseFork[]
  LectureMaster       LectureMaster? @relation(fields: [masterLectureId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Organizations       Organizations? @relation(fields: [organizationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  WeekFork            WeekFork?      @relation(fields: [weekId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model LectureMaster {
  id                  Int               @id(map: "Lecture_pkey") @default(autoincrement())
  title               String
  video               String?
  description         String?
  notes               String?
  isPublished         Boolean           @default(false)
  isFree              Boolean           @default(false)
  isActive            Boolean           @default(true)
  order               Int
  createdAt           DateTime          @default(now())
  updatedAt           DateTime
  cover               String?
  weekId              Int
  slug                String?
  languageId          Int[]
  videoMetaData       Json?
  personalEnvironment Boolean?          @default(false)
  type                LectureTypes      @default(TECH_LECTURE)
  ExerciseMaster      ExerciseMaster[]
  LectureFork         LectureFork[]
  WeekMaster          WeekMaster        @relation(fields: [weekId], references: [id], map: "Lecture_weekId_fkey")
  progress            LectureProgress[]
  Notes               Notes[]
  reviews             Review[]
  VideoProgress       VideoProgress[]
}

model WeekFork {
  id             Int            @id @default(autoincrement())
  title          String
  isPublished    Boolean?       @default(false)
  isActive       Boolean?       @default(true)
  createdAt      DateTime?      @default(now()) @db.Timestamp(6)
  updatedAt      DateTime?      @default(now()) @db.Timestamp(6)
  order          Int?
  courseId       Int?
  slug           String?
  organizationId Int?
  masterWeekId   Int?           @default(-1)
  LectureFork    LectureFork[]
  CourseFork     CourseFork?    @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  WeekMaster     WeekMaster?    @relation(fields: [masterWeekId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Organizations  Organizations? @relation(fields: [organizationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model WeekMaster {
  id            Int             @id(map: "Week_pkey") @default(autoincrement())
  title         String
  isPublished   Boolean         @default(false)
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  order         Int
  courseId      Int
  slug          String?
  LectureMaster LectureMaster[]
  WeekFork      WeekFork[]
  CourseMaster  CourseMaster    @relation(fields: [courseId], references: [id], map: "Week_courseId_fkey")
  progress      WeekProgress[]
}

enum UserPlan {
  FREE
  PAID
  PRO
  PREMIUM
}

enum PlanRange {
  FREE
  MONTHLY
  ANNUALLY
}

enum UserRole {
  ADMIN
  USER
  BETATESTER
  MENTOR
  TECH_SUPPORT
}

enum SubmissionStatus {
  TODO
  SOLVED
  ATTEMPTED
}

enum ExerciseLevel {
  EASY
  MEDIUM
  HARD
}

enum ReviewFor {
  VIDEO
  TEXT_TUTORIAL
}

enum LectureTypes {
  TECH_LECTURE
  SOFT_SKILLS
}

enum EnvironmentTypes {
  PERSONAL_ENVIRONMENT
  LINUX_LECTURE
  LINUX_EXERCISE
}
